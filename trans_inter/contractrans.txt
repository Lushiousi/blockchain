// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

contract MoneyTransfer {

mapping(address => uint) public balances;

struct Transfer {
    address payable sender;
    address payable receiver;
    uint amount;
    string codeWord;
    bool confirmed;
}

Transfer[] public transfers;

struct User {
    bool isAdmin;
    bool isNominated;
    uint confirmationCount;
    string password;
}

address public admin;
uint public adminConfirmationCount;
mapping(address => User) public users;

uint public totalAdmins;

constructor() {
    admin = msg.sender;
    users[admin] = User(true, false, 0, "123");
    totalAdmins = 1;
}

modifier onlyAdmin {
    require(users[msg.sender].isAdmin, "Only admin can perform this action");
    _;
}

modifier onlyLoggedIn {
    require(bytes(users[msg.sender].password).length > 0, "User is not logged in");
    _;
}


function nominateAdmin(address _user) public onlyAdmin onlyLoggedIn {
    require(!users[_user].isAdmin, "User is already an admin");
    require(!users[_user].isNominated, "User is already nominated");

    users[_user].isNominated = true;
}

function confirmAdminNomination(address _user) public onlyAdmin onlyLoggedIn {
    require(users[_user].isNominated, "User needs to be nominated for admin role");
    require(!users[_user].isAdmin, "User is already an admin");

    users[_user].confirmationCount++;
    if(users[_user].confirmationCount == totalAdmins){
        users[_user].isAdmin = true;
        users[_user].isNominated = false;
        users[_user].confirmationCount = 0;
        totalAdmins++;
    }
}

function login(address _user, string memory _password) public view returns (bool) {
    string memory password = users[_user].password;
    return (keccak256(abi.encodePacked(_password)) == keccak256(abi.encodePacked(password)));
}

function registerUser(address _user, string memory _password) public {
    require(bytes(users[_user].password).length == 0, "User already registered");
    users[_user].password = _password;
}

function getUserInfo(address _address) public view returns (string memory, bool, bool) {
    User memory user = users[_address];
    return (user.password, user.isAdmin, user.isNominated);
}

function initiateTransfer(address payable _receiver, uint _amount, string memory _codeWord) public payable {
    require(msg.value >= _amount, "Insufficient ether sent with the transaction");
    require(_amount > 0, "Transfer amount must be positive");
    require(bytes(_codeWord).length > 0, "Code word must be provided");

    transfers.push(Transfer({
        sender: payable(msg.sender),
        receiver: _receiver,
        amount: _amount,
        codeWord: _codeWord,
        confirmed: false
    }));
}

function confirmTransfer(uint _transferId, string memory _codeWord) public {
    require(_transferId < transfers.length, "Invalid transfer ID");
    Transfer storage transfer = transfers[_transferId];
    require(!transfer.confirmed, "Transfer already confirmed");

    if (keccak256(abi.encodePacked(_codeWord)) == keccak256(abi.encodePacked(transfer.codeWord))) {
        transfer.confirmed = true;
        transfer.receiver.transfer(transfer.amount * 1 ether);
    } else {
        transfer.confirmed = true;
        transfer.sender.transfer(transfer.amount * 1 ether);
    }
}

function cancelTransfer(uint _transferId) public {
require(_transferId < transfers.length, "Invalid transfer ID");
Transfer storage transfer = transfers[_transferId];
require(msg.sender == transfer.sender, "You are not the sender of this transfer");
require(!transfer.confirmed, "Transfer already confirmed");

transfer.sender.transfer(transfer.amount * 1 ether);
transfer.confirmed = true; 
}


function getTransferCount() public view returns (uint) {
    return transfers.length;
}
}